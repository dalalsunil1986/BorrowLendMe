package BorrowLendMeAPIUtil;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Date;import java.util.Properties;import javax.mail.Address;import javax.mail.Authenticator;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.PasswordAuthentication;import javax.mail.Session;import javax.mail.Transport;import javax.mail.internet.AddressException;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;import javax.swing.Timer;import play.Play;public class EmailUtil {	private static final String SMTP_HOST = Play.application().configuration().getString("smtp.host");	private static final String SMTP_PORT = Play.application().configuration().getString("smtp.port");	private static final String USERNAME = Play.application().configuration().getString("smtpnoreply.user");	private static final String PASSWORD = Play.application().configuration().getString("smtpnoreply.password");	private static Properties properties = new Properties();	private EmailUtil(){}	private static EmailUtil emailUtil = null;	@Override	protected Object clone() throws CloneNotSupportedException {		return getEmailUtil();	}	public static EmailUtil getEmailUtil() {		if (null == emailUtil) {			emailUtil = new EmailUtil();		}		return emailUtil;	}	public void sendEmail(final String to, final String cc, final String bcc, final String subject, final String body) {		String [] toAddr = (GeneralUtil.isEmpty(to)) ? null : new String[]{to},				ccAddr = (GeneralUtil.isEmpty(cc)) ? null : new String[]{cc},				bccAddr = (GeneralUtil.isEmpty(bcc)) ? null : new String[]{bcc};		sendEmail(toAddr, ccAddr, bccAddr, subject, body);	}	public void sendEmail(final String [] to, final String [] cc, final String [] bcc, final String subject, final String body) {		Timer timer = new Timer(1000, new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				try {					properties.put("mail.smtp.host", SMTP_HOST);					properties.put("mail.smtp.port", SMTP_PORT);					properties.put("mail.from", USERNAME);					properties.put("mail.smtp.starttls.enable", "true");					properties.put("mail.smtp.auth", "true");					properties.put("mail.debug", "true");					Session session = Session.getInstance(properties, new Authenticator() {						@Override						protected PasswordAuthentication getPasswordAuthentication() {							return new PasswordAuthentication(USERNAME,									PASSWORD);						}					});					shootMail(USERNAME, session, to, cc, bcc, subject, body);				} catch (Exception ex) {					ex.printStackTrace();					GeneralUtil.logStackTrace(ex, EmailUtil.class);				}			}		});		timer.setRepeats(false);		timer.start();	}	private void shootMail(final String userName, final Session session, final String [] to, final String [] cc, final String [] bcc, final String subject, final String body) throws AddressException, MessagingException {		MimeMessage message = new MimeMessage(session);		message.setFrom(new InternetAddress(userName));		if(to!=null){			Address [] toAddress = new InternetAddress[to.length];			for (int i = 0; i < to.length; i++) {				if (!GeneralUtil.isEmpty(to[i])){					toAddress[i] = new InternetAddress(to[i]);				}			}			message.addRecipients(Message.RecipientType.TO, toAddress);		}		if(cc!=null){			if (!GeneralUtil.isEmpty(cc) && cc.length > 0) {				Address [] ccAddress = new InternetAddress[cc.length];				for (int i = 0; i < cc.length; i++) {					if (!GeneralUtil.isEmpty(cc[i])) {						ccAddress[i] = new InternetAddress(cc[i]);					}				}				if (ccAddress.length > 0) {					message.addRecipients(Message.RecipientType.CC, ccAddress);				}			}		}		if(bcc!=null){			if (!GeneralUtil.isEmpty(bcc) && bcc.length > 0) {				Address [] bccAddress = new InternetAddress[bcc.length];				for (int i = 0; i < bcc.length; i++) {					if (!GeneralUtil.isEmpty(bcc[i])) {						bccAddress[i] = new InternetAddress(bcc[i]);					}				}				if (bccAddress.length > 0) {					message.addRecipients(Message.RecipientType.BCC, bccAddress);				}			}		}		message.setSubject(subject);		message.setContent(body, "text/html; charset=utf-8");		message.setSentDate(new Date());		Transport.send(message);	}}